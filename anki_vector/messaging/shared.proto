// Copyright (c) 2018 Anki, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License in the file LICENSE.txt or at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// External interface for robot <-> app and robot <-> sdk communication

syntax = "proto3";

package Anki.Vector.external_interface;

import "anki_vector/messaging/behavior.proto";
import "anki_vector/messaging/cube.proto";
import "anki_vector/messaging/messages.proto";
import "anki_vector/messaging/settings.proto";
import "anki_vector/messaging/extensions.proto";
import "anki_vector/messaging/response_status.proto";

message ProtocolVersionRequest {
  int64 client_version = 1;
  int64 min_host_version = 2;
}

message ProtocolVersionResponse {
  enum Result {
    UNSUPPORTED = 0;
    SUCCESS = 1;
  }
  Result result = 1;
  int64 host_version = 2;
}

message ConnectionResponse {
  ResponseStatus status = 1;
  bool is_primary = 2;
}

// Messages originating from the engine
message Event {
  oneof event_type {
    TimeStampedStatus                time_stamped_status                 = 1;
    WakeWord                         wake_word                           = 3;
    RobotObservedFace                robot_observed_face                 = 5;
    RobotChangedObservedFaceID       robot_changed_observed_face_id      = 6;
    ObjectEvent                      object_event                        = 7;
    StimulationInfo                  stimulation_info                    = 8;
    PhotoTaken                       photo_taken                         = 9;
    RobotState                       robot_state                         = 10;
    CubeBattery                      cube_battery                        = 11;
    // Used by Vector to verify the connection is still alive.
    KeepAlivePing                    keep_alive                          = 12;
    ConnectionResponse               connection_response                 = 13;
    MirrorModeDisabled               mirror_mode_disabled                = 16;
    VisionModesAutoDisabled          vision_modes_auto_disabled          = 17;
    UserIntent                       user_intent                         = 19;
  }
}

message FilterList {
  repeated string list = 1;
}

message EventRequest {
  oneof list_type {
    FilterList white_list = 1;
    FilterList black_list = 2;
  }
  string connection_id = 3;
}

message EventResponse {
  option (streamed) = true;
  ResponseStatus status = 1;
  Event event = 2;
}

message UserAuthenticationRequest {
  bytes user_session_id = 1;
  bytes client_name = 2;
}

message UserAuthenticationResponse {
  ResponseStatus status = 1;
  enum Code {
    UNAUTHORIZED = 0;
    AUTHORIZED = 1;
  }
  Code code = 2;
  bytes client_token_guid = 3;
}

